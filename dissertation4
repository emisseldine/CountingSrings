/////////////////////////////////////////Coded SRings////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////


AutoSRingCycCode := function(r,p,k);

// Given a finite cyclic group Z_{p^k} and an integer r,
// returns the partition of G corresponding to the rational s-ring induced by <r> < Aut(G).
		
	return [ [p,k,r], [k]];
end function;


SRing0Code := function(p,n);

// Given a cyclic group G of order p^n 
// returns the trivial S-ring over G.
	
	return [ [p,n,0], [n]];
end function;


SymmetricSRingCode := function(p,n);

// Given a cyclic group G of order p^n 
// returns the Symmetric S-ring over G.
	
		return [ [p,n,p^n-1], [n]];
end function; 



TopRationalSRingsCode := function(p,n);

// Given a finite cyclic group G of order p^n,
// returns all the partitions of G which correspond to rational s-rings which are wedge-
// indecomposable.

	SRings := []; 
	order := p^n;

	if p eq 2 then
		SRings cat:= [ AutoSRingCycCode(1,p,n) ];
		if n gt 2 then 
			SRings cat:= [SymmetricSRingCode(p,n)];
			SRings cat:= [AutoSRingCycCode( (p^(n-1)-1) mod order, p,n)];
		end if;
		return SRings;
	else
		q := p^(n-1);      
		f := order - q;				// EulerPhi(p^n);
		a := PrimitiveRoot(p^n);		// a generates Aut(G)
		
		for d in Divisors(p-1) do
			SRings cat:= [AutoSRingCycCode(a^(q*d) mod order, p,n)];
		end for;					
							
		return SRings;
	end if;
end function;


WedgeProductCode := function(p, nucleus, h, cloud, k);

// Given two S-rings, nucleus and cloud, over cyclic groups, Z_(p^h) and Z_(p^k), respectively,
// returns the wedge product (S wedge T) and the cyclic group Z_(p^(h+k)). 
	
	wedge := [];
	if #nucleus eq 2
	then 
		wedge := [nucleus[1]];
	else
		wedge cat:= nucleus; 

	end if;
	if #cloud eq 2
	then 
		wedge cat:= [cloud[1]];
	else
		wedge cat:= cloud; 

	end if;
	wedge cat:= [ [h+k]];


	return wedge;
end function; 


IsWedgePossibleCode := function(p, nucleus, h, cloud, k, g);

// Given an S-ring nucleus over H=Z_(p^h) and an S-ring Cloud over K=Z_(p^k),
// returns true if the semi-wedge product is possible over G = Z_(p^n).
// 1 < L < H < G, with L = G/K.

	nu := [p, h-1, (nucleus[1,3]) mod p^(h-1)];
	cl := cloud[1];

	if (p eq 2) and (h eq 3) and (nu[3] eq 3) and (#cloud gt 2)
	then
		return ((nu[2] le cl[2]) and ( nu[3] eq ( cl[3] mod p^nu[2]) )) 
		or ( (cl eq [2,1,1]) and (cloud[2,3] ne 0) );
	else
		return (nu[2] le cl[2]) and ( nu[3] eq ( cl[3] mod p^nu[2]) );
	end if;
end function;


TrivialWedgeProductsCode := function(p, h, srings, k);

// Given a cyclic group H=Z_(p^h) and a set of S-rings over some cyclic group K=Z_(p^k),
// returns all wedge products over G=Z_(p^(h+k)) with nucleus the trivial S-ring over H and 
//clouds from srings.

	trivial := SRing0Code(p,h);
	return [WedgeProductCode(p, trivial,h, cloud,k) : cloud in srings];
end function;	


SemiWedgeProductCode := function(p, nucleus, h, cloud, k, g);

// Given cyclic subgroups 1 < L < H < G, each cyclic p-groups and L = G/K, 
// and given S-rings nucleus and cloud over H and G/K, respectively,
// and H, K, and G have orders p^h, p^k, and p^g, respectively,
// returns the semi-wedge product (S wedge T). 

	wedge := [];
	if #nucleus eq 2
	then 
		wedge := [nucleus[1]];
	else
		wedge cat:= nucleus; 

	end if;
	if #cloud eq 2
	then 
		wedge cat:= [cloud[1]];
	else
		wedge cat:= cloud; 

	end if;
	wedge cat:= [ [g]];


	return wedge;
end function; 


SemiWedgeProductsCode := function(p, sring, h, srings, k, g);

// Given cyclic subgroups 1 < L < H < G, each cyclic p-groups and L = G/K, 
// and given an S-ring over H and a set of S-rings over G/K, 
// and H, K, and G have orders p^h, p^k, and p^g, respectively,
// returns all semiwedge products over G with nucleus sring and clouds from srings.


	SR := [];

	for i := 1 to #srings do
		if IsWedgePossibleCode(p, sring,h, srings[i],k,g) then
			SR cat:= [SemiWedgeProductCode(p, sring, h, srings[i], k, g)];
		end if;
	end for;
		
	return SR;
end function;	

		
forward SRingCodes;
SRingCodes := function(p,n);

// Given a cyclic group G of prime power order p^n,
// returns the set of all S-ring over G.

	if n eq 1
		then return TopRationalSRingsCode(p,1);

	else
			srings := [SRing0Code(p,n)];
			srings cat:= TopRationalSRingsCode(p,n);	

			sr := [];
			for i := 1 to n-1 do
				sr[i] := SRingCodes(p,i);
			end for;
	
			srQ := sr[n-1];			//cloud
			

			for i := 1 to n-1 do    
				srN := TopRationalSRingsCode(p,i); //nucleus
				
				for s in srN do
					srings cat:= SemiWedgeProductsCode(p,s, i, srQ, n-1, n); 
				end for;

				if i gt 1 then
					srH := sr[n-i];
				
					srings  cat:= TrivialWedgeProductsCode(p, i, srH, n-i);
				end if;
	end for;
				
				return srings;
	end if;
end function;


SRingCodesFast := function(p,n, SmallerSRings);

// Given a cyclic group G of prime power order p^n,
// returns the set of all S-ring over G.

	if n eq 1
		then return TopRationalSRingsCode(p,1);

	else
			srings := [SRing0Code(p,n)];
			srings cat:= TopRationalSRingsCode(p,n);		
			srQ := SmallerSRings[n-1];			//cloud
			

			for i := 1 to n-1 do    
				srN := TopRationalSRingsCode(p,i); //nucleus
				
				for s in srN do
					srings cat:= SemiWedgeProductsCode(p,s, i, srQ, n-1, n); 
				end for;

				if i gt 1 then
					srH := SmallerSRings[n-i];
				
					srings cat:= TrivialWedgeProductsCode(p, i, srH, n-i);
				end if;
	end for;
				
				return srings;
	end if;
end function;


FindSingleton := function(array);

// Given an array of arrays,
// returns the index of the first singleton.

	n := 1;
	
	for i := 2 to #array do
		if #array[i] eq 1
			then n := i;
			break;
		end if;
	end for;
	return n;
end function;


AtomicSRingClassSizesCode := function(sring);

// Given an atomic SRing
// returns the list of class sizes of sring in ascending order.

	if sring[3] eq 0
		then return [1, sring[1]^sring[2] - 1];
	else
		CS := [1];
		for i := 1 to sring[2] do
			pn := sring[1]^i;
			ord := Modorder(sring[3],pn);
			CS cat:= &cat [[ord] : x in [1..((pn - (pn div sring[1]) ) div ord)]];
		end for;
		return CS;
	end if;
end function;


SRingClassSizesCode := function(sring);

// Given an Sring
// returns the list of class sizes of sring in ascending order.

	if #sring eq 2
		then return AtomicSRingClassSizesCode(sring[1]);
	else
		n := Ceiling(#sring/2);
		p := sring[1,1];
		T := AtomicSRingClassSizesCode(sring[n]);
		k := sring[n,2];

		
		for i := 1 to (#sring-1) div 2 do
			S := AtomicSRingClassSizesCode(sring[n-i]);

			start := 0;
			sum := 0;
			while sum ne p^(sring[n-i,2] + k - sring[n+i,1]) do
				start +:= 1;
				sum +:= T[start]; 
			end while; 
			
			T := S cat [ (p^(sring[n+i,1]-k))*T[t] : t in [start+1..#T]];
			k := sring[n+i,1];
		end for;

		return T;
	end if;
end function;


AtomicSRingDecrypt := function(sring);

// Given a coded atomic Sring [p,k,r],
// returns the partition of Z_{p^k}.

	if sring[3] eq 0
		then return SRing0(sring[1], sring[2]);
	else 
		return AutoSRingCyc(sring[3],sring[1],sring[2]);
	end if;
end function;


SRingDecrypt := function(sring);

// Given a coded sring,
// return the partition for the sring.

	if #sring eq 2
		then return AtomicSRingDecrypt(sring[1]);
	else
		n := Ceiling(#sring/2);
		p := sring[1,1];
		T := AtomicSRingDecrypt(sring[n]);
		k := sring[n,2];

		
		for i := 1 to (#sring-1) div 2 do
			S := AtomicSRingDecrypt(sring[n-i]);
			T := SemiWedgeProduct(p, S, sring[n-i,2], T, k, sring[n+i,1]);
			k := sring[n+i,1];
		end for;

		return T;
	end if;
end function;		

p := 7; k := 7;
SR := SRingCodes(p,k);
classes := [];

for i := 1 to #SR do
 	sc := SRingClassSizesCode(SR[i]);
	if sc in classes then i; end if;
	Append(~classes,sc);
end for;
#SR;
#classes;

