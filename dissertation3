ArrayIsSub := function(A,B);

// Given two arrays,
// returns true if everything in A is also contained in B.

	return &and [A[i] in B : i in [1..#A]];
end function;


ArrayDiff := function(A,B);

// Given two arrays A and B without repetition,
// returns the subarray of A which excludes all entries from B.

	for i := 1 to #B do
		Exclude(~A,B[i]);
	end for;
	return A;
end function;


ArrayAppend := procedure(~A, x);

// Given an array and element,
// returns the appended array with element attached

	if not x in A
		then Append(~A, x);
	end if;
end procedure;


ArrayMeet := function(A,B);

// Given two arrays A and B without repetitions,
// returns the intersection of the two arrays.

	AB := [];
	for i := 1 to #A do
		if A[i] in B
			then Append(~AB,A[i]);
		end if;
	end for;
	return AB;
end function;
	

ArrayJoin := function(A,B);

// Given two arrays A and B without repetitions,
// returns the union of the two arrays.

	A := ArrayDiff(A,B);
	return A cat B;
end function;


ArrayMultiJoin := function(arrays);

// Iterates ArrayJoin.

	union := [];
	for i := 1 to #arrays do
		union := ArrayJoin(union, arrays[i]);
	end for;
	
	return union;
end function; 





//////////////////////////////
//////////////////////////////

AreSRingsEqual := function(S,T);

// Given two Srings,
// returns true if they are the same.

	if #S ne #T 
		then return false;

	else 
		bool := true;
		for i := 1 to #S do
			bool and:= S[i] in T;
		end for;
		
		return bool;
	end if;
end function;


IncludeSRing := function(sring, p, k, n)

// Given an S-ring over Z_(p^k) and an integer n larger than k,
// returns sring as an immersed S-ring of Z_(p^n).
	
	S := [];
	
	for i := 1 to #sring do
		S[i] := [a*p^(n-k) : a in sring[i]];
	end for;

	return S;
end function;


Layer := function(p, k, n);

// Given a cyclic of order p^n and a positive integer k less than n,
// returns the unique subgroup of order p^k.
	
	return [x*p^(n-k) : x in  [0..p^k-1]];
end function;


ImmersedSRing := function(sring, p, n, k);

// Given an S-ring over a cyclic group of order p^n and a subgroup K of order p^k,
// returns the partition of G containing only classes which intersect K.
	
	H := Layer(p,k,n);
	return [C : C in sring | ArrayMeet(H,C) ne [] ];
end function;


RemoveSubgroup := function(sring, p, n, k);

// Given an S-ring over a cyclic group G of order p^n and a subgroup K of order p^k,
// returns the partition of G for which every class containing an element of K is removed.

	return ArrayDiff(sring, ImmersedSRing(sring,p, n, k));
end function; 


InflatedSRing := function(sring, p, n);

// Given an S-ring over Z_(p^n),
// returns the inflated S-ring over Z_(p^(n+1)).

	H := Layer(p,1,n+1);		
	return [ &cat[ [x+h : x in C] : h in H] : C in sring];
end function;


MultiInflatedSRing := function(sring, p, n, r);

// Iterates InflatedSRing r-times.


	for i := 1 to r do
		sring := InflatedSRing(sring, p, n+i-1);
	end for;
	return sring;
end function;


DeflatedSRing := function(sring, p, n);

// Given an immersed S-ring over Z_(p^n),
// returns the deflated S-ring over Z_(p^(n-1)).
	
	if #sring eq 2
		then return SRing0(p,n-1);
	else
		S := { {x mod p^(n-1) : x in C} : C in sring};
		
		return [ Sort(Setseq(C)) : C in S]; 


//	def := [];

//	for i := 1 to #sring do
//		C := [];
//		for j := 1 to #sring[i] do
//			ArrayAppend(~C,sring[i,j] mod p^(n-1));
//		end for;
//
//		for j := 1 to #def do
//			C := ArrayDiff(C,def[j]);
//		end for;
//
//		if #C ne 0 
//			then ArrayAppend(~def, C);
//		end if;
//	end for;
//	return def;

	end if;
end function;
	

AutoClassCyc := function(x, r, n);

// Given an integer x, a modulus, n, and an integer r,
// returns the automorphism class of x with respect to the automorphism group <r> in the 
// ambient cyclic group Z_n.

	C := [x];
	b := (r*x) mod n;
		
	while b ne x do
		Append(~C,b);
		b := (r*b) mod n;
	end while;
		
	return Sort(C);
end function;


AutoSRingCyc := function(r,p,k);

// Given a finite cyclic group Z_{p^k} and an integer r,
// returns the partition of G corresponding to the rational s-ring induced by <r> < Aut(G).

	n := p^k;
	Sring := [[0]];
	g := [1..n-1];

	while not IsEmpty(g) do
		C := AutoClassCyc(g[1],r,n);
		Append(~Sring,C);
		for x in C do
			Exclude(~g,x);
		end for;
	end while;
		
	return Sring;
end function;

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////


SRing0 := function(p,n);

// Given a cyclic group G of order p^n 
// returns the trivial S-ring over G.
	if n eq 0
		then return [ [0] ];
	else
		return [[0], [x : x in [1..p^n-1]] ];
	end if;
end function;


SymmetricSRing := function(p,n);

// Given a cyclic group G of order p^n 
// returns the Symmetric S-ring over G.

	order := p^n;
	
	if p eq 2 then
		S := [ [0] ] cat [ [x, (-x) mod order] : x in [1..order div 2] ];
		return Prune(S) cat [ [order div 2]];
	else 
		return [ [0] ] cat [ [x, (-x) mod order] : x in [1..(order div 2)] ];
	end if;
end function; 



TopRationalSRings := function(p,n);

// Given a finite cyclic group G of order p^n,
// returns all the partitions of G which correspond to rational s-rings which are wedge-
// indecomposable.

	SRings := []; 
	order := p^n;

	if p eq 2 then
		Z := Integers();
		SRings cat:= [ [ [x] : x in [0..order-1]] ];
		if n gt 2 then 
			SRings cat:= [SymmetricSRing(p,n)];
			SRings cat:= [AutoSRingCyc( (p^(n-1)-1) mod order, p,n)];
		end if;
		return SRings;
	else
		q := p^(n-1);      
		f := order - q;				// EulerPhi(p^n);
		a := PrimitiveRoot(p^n);		// a generates Aut(G)
		
		for d in Divisors(p-1) do
			SRings cat:= [AutoSRingCyc(a^(q*d) mod order, p,n)];
		end for;					
							
		return SRings;
	end if;
end function;


WedgeProduct := function(p, nucleus, h, cloud, k);

// Given two S-rings, nucleus and cloud, over cyclic groups, Z_(p^h) and Z_(p^k), respectively,
// returns the wedge product (S wedge T) and the cyclic group Z_(p^(h+k)). 
	
	g := h+k;
	
	nucleus := IncludeSRing(nucleus, p, h, g);
	R := MultiInflatedSRing(cloud, p, k, h);
	cloud := Remove(R,1);

	return nucleus cat cloud;
end function; 


IsWedgePossible := function(p, nucleus, h, cloud, k, g);

// Given an S-ring nucleus over H=Z_(p^h) and an S-ring Cloud over K=Z_(p^k),
// returns true if the semi-wedge product is possible over G = Z_(p^n).
// 1 < L < H < G, with L = G/K.

	//L := Layer(p, g-k, g);
	//N := IncludeSRing(nucleus, p, h, g);

	
	//if not IsSset(L,N)

	//then 
	//	return false;
	
	//else 
	//	QH := Layer(p, h-1, k);

	//	if not IsSset(QH,cloud) 

	//	then 
	//		return false;
		
	//	else
			DN := IncludeSRing(DeflatedSRing(nucleus, p, h),p, h-1, k);
			IC := ImmersedSRing(cloud, p, k, h-1);
			
			//return IC eq DN;
			return AreSRingsEqual(IC, DN);
	//	end if;
	
	//end if;
end function;


TrivialWedgeProducts := function(p, h, srings, k);

// Given a cyclic group H=Z_(p^h) and a set of S-rings over some cyclic group K=Z_(p^k),
// returns all wedge products over G=Z_(p^(h+k)) with nucleus the trivial S-ring over H and 
//clouds from srings.

	trivial := SRing0(p,h);
	return [WedgeProduct(p,trivial,h, cloud,k) : cloud in srings];
end function;	


SemiWedgeProduct := function(p, nucleus, h, cloud, k, g);

// Given cyclic subgroups 1 < L < H < G, each cyclic p-groups and L = G/K, 
// and given S-rings nucleus and cloud over H and G/K, respectively,
// and H, K, and G have orders p^h, p^k, and p^g, respectively,
// returns the semi-wedge product (S wedge T). 

	nucleus := IncludeSRing(nucleus, p, h, g);

	R := MultiInflatedSRing(cloud, p, k, g-k);
	cloud := RemoveSubgroup(R, p, g, h);

	return nucleus cat cloud;
end function; 


SemiWedgeProducts := function(p, sring, h, srings, k, g);

// Given cyclic subgroups 1 < L < H < G, each cyclic p-groups and L = G/K, 
// and given an S-ring over H and a set of S-rings over G/K, 
// and H, K, and G have orders p^h, p^k, and p^g, respectively,
// returns all semiwedge products over G with nucleus sring and clouds from srings.


	SR := [];

	for i := 1 to #srings do
		if IsWedgePossible(p, sring,h, srings[i],k,g) then
			SR cat:= [SemiWedgeProduct(p, sring, h, srings[i], k, g)];
		end if;
	end for;
		
	return SR;
end function;	

		
forward SRings;
SRings := function(p,n);

// Given a cyclic group G of prime power order p^n,
// returns the set of all S-ring over G.

	if n eq 1
		then return TopRationalSRings(p,1);

	else
			srings := [SRing0(p,n)];
			srings cat:= TopRationalSRings(p,n);	

			sr := [];
			for i := 1 to n-1 do
				sr[i] := SRings(p,i);
			end for;
	
			srQ := sr[n-1];			//cloud
			

			for i := 1 to n-1 do    
				srN := TopRationalSRings(p,i); //nucleus
				
				for s in srN do
					srings cat:= SemiWedgeProducts(p,s, i, srQ, n-1, n); 
				end for;

				if i gt 1 then
					srH := sr[n-i];
				
					srings  cat:= TrivialWedgeProducts(p, i, srH, n-i);
				end if;
	end for;
				
				return srings;
	end if;
end function;


SRingsFast := function(p,n, SmallerSRings);

// Given a cyclic group G of prime power order p^n,
// returns the set of all S-ring over G.

	if n eq 1
		then return TopRationalSRings(p,1);

	else
			srings := [SRing0(p,n)];
			srings cat:= TopRationalSRings(p,n);	
			srQ := SmallerSRings[n-1];		//cloud
			

			for i := 1 to n-1 do    
				srN := TopRationalSRings(p,i); //nucleus
				
				for s in srN do
					srings cat:= SemiWedgeProducts(p,s, i, srQ, n-1, n); 
				end for;

				if i gt 1 then
					srH := SmallerSRings[n-i];
				
					srings  cat:= TrivialWedgeProducts(p, i, srH, n-i);
				end if;
	end for;
				
				return srings;
	end if;
end function;
		

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

IsSset := function(H, sring);

// Given an S-ring over a group G and a sorted subset H of G,
// returns if true if the sum of H is an element of sring.

	S := &cat [C : C in sring | #ArrayMeet(C,H) ne 0];		

	return Sort(S) eq H;
end function;


InverseClass := function(C, p, n);

// Given a subset C of a cyclic group of order p^n,
// returns the inverse class of C.
	
	order := p^n;
	return Sort([ (-x) mod order : x in C]);
end function; 


ClassProduct := function(C,D, p, n);

// Given two subsets of a cyclic group of order p^n,
// returns the product of sets in the group.

	order := p^n;
	return Sort(ArrayMultiJoin([ [(c + d) mod order : d in D] : c in C]));
end function;


IsSRing := function(sring, p, n);

// Given a partition of a cyclic group of order p^n,
// returns true if the partition affords an S-ring.

	order := p^n;

	first := [0] in sring;

	second := &and [ InverseClass(C,p,n) in sring : C in sring];


	third := true;
	for C in sring do
		for D in sring do
			S := ClassProduct(C,D,p,n);
			third and:= IsSset(S,sring); 
		end for;
	end for;
	
	return first and second and third;
end function;

IsCoset := function(C, p, n);

// Given a (sorted) subset of a cyclic group of order p^n,
// returns true if the subset is a coset of the group.

	if (#C) mod p eq 0 then 
		order := p^n;	
		H := Layer(p,1,n);
		bool := true;
		
		for x in C do
			bool and:= ArrayIsSub(Sort([(x + h) mod order : h in H]), C);
		end for;
		return bool;

	else 
		return false;
	end if;
end function; 

