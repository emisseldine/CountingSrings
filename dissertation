//Some of the code below was originally written by Brent Kirby or is an alteration of his 
//original code. Functions and procedures which are based upon Kirby's code will be designated
//by the initials BK in the preamble of the function or procedure.


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////Omega Code////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

forward Omega;
Omega := function(n);

// Given a nonnegative integer n, 
// returns the nth Omega-polynomial, that is, the polynomial associated with the number of S-rings over Z_{p^n}.


	P<x> := PolynomialRing(Integers());
	
	case n:
		when 0: return 1;
	
		when 1: return x;
		
		else return (x*Omega(n-1) + &+[(Catalan(k-1)*x + 1)*Omega(n-k) : k in [2..n]]);
	end case;

end function;


NewOmega := procedure(n, ~P);

// Given a positive integer n and the list of the first few Omega-polynomial, 
// the procedure will add to the list all the Omega-polynomials up until the nth degree.
// Unlike the original Omega, NewOmega records the polynomials in the array P to avoid unnecessary
// recursion. As a consequence, NewOmega runs much faster than Omega, although it uses a marginal
// amount of extra memory.

	R<x> := PolynomialRing(Integers());
	P[1] := x;
	P[2] := x^2+x+1;
	
	if (#P le n) and (#P ne n) then
		for m := #P+1 to n do
			P[m] := x*P[m-1] + (Catalan(m-1)*x + 1) + &+[(Catalan(k-1)*x + 1)*P[m-k] : k in [2..(m-1)]];
		end for;
	end if;
	
end procedure;




forward omega;
omega := function(n,k);

// Given a nonnegative integer n and a nonnegative integer k <= n, 
// returns the polynomial associated with the number of S-rings over Z_{p^n} which map 
// onto Q(z_{p^k}).

	P<x> := PolynomialRing(Integers());

	case k:
		when n : return 1;

		when 0: return &+[Omega(j) : j in [0..n-1]];

		when 1 : return Omega(n-1);

		else return &+[omega(n-1,j): j in [k-1..n-1]];
	end case;

end function;


forward Newomega;
Newomega := function(n,k);

// Given a nonnegative integer n and a nonnegative integer k <= n, 
// returns the polynomial associated with the number of S-rings over Z_{p^n} which map 
// onto Q(z_{p^k}).
// Unlike the original omega, Newomega relies on NewOmega instead of Omega in order to avoid unnecessary
// recursion. As a consequence, Newomega runs faster than omega, although it uses a marginal
// amount of extra memory.

	R<x> := PolynomialRing(Integers());
	s := [];

	case k:
		when n : return 1;

		when 0: 
			NewOmega(n-1, ~s);
			return &+[s[j] : j in [1..n-1]] + 1;

		when 1 : 
			NewOmega(n-1,~s);
			return s[n-1];		

		else return &+[Newomega(n-1,j): j in [k-1..n-1]];
	end case;

end function;


CataBin := function(n, k,r);

	//if n eq 0 then return 1;
	
	//else 
	return &+ [Binomial(n-r-3, n-l-3) : l in [r..k]];
	//return &+ [Binomial(n-r-1, n-l-1) : l in [r..k]];
	//end if;
end function;

New2omega := function(n,m);

	R<x> := PolynomialRing(Integers());

	if (m gt n) or (m lt 0) then
		return R!0;
	else
		k := n - m;
		return &+ [ CataBin(n,k,r)*x^r : r in [0..k]  ];
	end if;
end function;

forward New3omega;
New3omega := function(n,m);

	R<x> := PolynomialRing(Integers());

	if (m gt n) or (m lt 0) then
		return R!0;
	else
		k := n-m;
		if k lt 1 
			then return Omega(k);
		else
			return Omega(k) + &+ [Binomial(n+i-k-3,n-k-2)*New3omega(k+1,i) : i in [2..k+1]];
		end if;
	end if;
end function;



Schroder := function(n);

return &+[Catalan(k)*Binomial(n+k,2*k) : k in [0..n]];
end function;

forward Omega2;
Omega2 := function(n);

// Given a nonnegative integer n, 
// returns  the number of S-rings over Z_{2^n}.

	
	case n:
		when 0: return 1;
	
		when 1: return 1;

		when 2 : return 2*Omega2(n-1) + 1; //3

		when 3 : return 2*Omega2(n-1)+ Omega2(n-2) + Catalan(n-2) + Schroder(n-2); //10
		
		else return 2*Omega2(n-1)+4*Omega2(n-2) + 8*Omega2(n-3) - (Catalan(n-1) + Schroder(n-1))
		+ &+[(Catalan(k-1) + Schroder(k-1) - &+[ Catalan(j) + Schroder(j) : j in [1..k-3]])*Omega2(n-k) : k in [4..n]];
	end case;
end function;

omega2 := function(n,k);

	if k gt n then
		return 0;
	else 
		case k:
			when n : return 1;
	
			when 0 : if n eq 0 then return 1;
				 else return &+[Omega2(j) : j in [0..n-1]];
				 end if;

			when 1 : return Omega2(n-1);

			when 2 : return Omega2(n-1) - omega2(n-1,0) + Omega2(n-2);
			//when 2 : return Omega2(n-1) - omega2(n-2,0);

			else return &+ [omega2(n-1,j) : j in [k-1..n-1]];
		end case;
	end if;
end function;



//forward Omega2;
//forward omega2;
//forward omegaS;

//Omega2 := function(n);
//
//// Given a nonnegative integer n, 
//// returns  the number of S-rings over Z_{2^n}.
//
//	
//	case n:
//		when 0: return 1;
//	
//		when 1: return 1;
//
//		when 2 : return omega2(n,0) + &+ [omega2(n,k) : k in [2..n]];
//		
//		else return omega2(n,0) + &+ [omega2(n,k) : k in [2..n]] 
//			+ 2*&+ [omegaS(n,k) : k in [3..n]];
//	end case;
//
//end function;


//omegaS := function(n,k);
//
//	if k gt n then
//		return 0;
//	else
//		case k:
//			when n : return 1;
//
//			when 3 : return Omega2(n-1) - omega2(n-1,0) 
//				- &+ [omega2(n-1,j) : j in [2..n-1]] + omega2(n-1,2);
//	
//			else return &+ [omegaS(n-1,j) : j in [k-1..n-1]]  + 
//					&+ [omegaS(n-1,j) : j in [k..n-1]] ;
//		end case;
//	end if;
//end function; 


forward Kovacs;
Kovacs := function(n);
	if n eq 1 then return Omega2(n);

	else return Omega2(n) - &+ [Kovacs(k)*Omega2(n-k) : k in [1..n-1]];
	end if;
end function;


NumberSRings := function(p,n,numSRings);

if p eq 2 then return Omega2(n);

else
	x := #Divisors(p-1);
	case n:
		when 0: return 1;
		when 1: return x;
		when 2: return x^2+x+1;
		else 
			return (x*numSRings[n-1] + Catalan(n-1)*x+1 + &+[(Catalan(k-1)*x + 1)*numSRings[n-k] : k in [2..n-1]]);
	end case;
end if;
end function;
	

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////Functions for Groups////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////


Coset := function(g, H, G);

// Given group element g in a group G and a normal subgroup H,
// returns the left coset gH in G.

	return {g*G!h : h in H};	
end function;


Cosets := function(H,K, G);

// Given subsets (subgroups) H, K of a group G,
// returns the product of sets in G.

	return &join {Coset(h,K,G) : h in H};	
end function;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////Functions for S-Rings////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

UnitClass := function(sring, G);

// Given a pre-S-ring over G,
// Returns the unit class of S-ring.

	return {C : C in sring | Id(G) in C};
end function;


RemoveUnitClass := function(sring, G);

// Given a pre-S-ring over G,
// returns the partition with the unit class removed.

	return sring diff UnitClass(sring,G);
end function; 


SRingOrder := function(sring);

// Given an S-ring over a group,
// returns the order of the S-ring.

	return #(&join {C : C in sring});
end function;


IsSset := function(H, sring);

// Given an S-ring over a group, and a subset H of the group
// returns the true if H is an S-set.
// BK

	S := &join [C : C in sring | #(C meet H) ne 0];

	return S eq H;
end function;


ImmersedSRing := function(sring, H, G);

// Given an S-ring over a group G and a subgroup H,
// returns the partition of G containing only classes which intersect H.

	return {C : C in sring | Set(H) meet C ne {} };
end function;


RemoveSubgroup := function(sring, H, G);

// Given an S-ring over a group G and a subgroup H,
// returns the partition of G for which every class containing an element of H is removed.

	return sring diff ImmersedSRing(sring,H,G);
end function; 


SRing0 := function(G);

// Given a finite group G, 
// returns the trivial S-ring over a group G.
// BK

	if #G ne 1 
		then return {{Id(G)},Set(G) diff {Id(G)}};

	else 
		return {{Id(G)}}; 
	end if;

end function;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////Functions S-rings over Z_n////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

CycSRingNice := function(sring,G);

// Given an S-ring, sring, of cyclic group G,
// returns same S-ring partition as before but elements are replaced with powers of generator
// BK

	GI := AssociativeArray(G);
	n := #G-1;

  	for i:=0 to n do
    		GI[G.1^i]:= i;
  	end for;

  	return {{GI[g] : g in C} : C in sring};

end function;



CycSRingsNice := function(srings, G);

// Given a set of S-rings, srings, of cyclic group G,
// returns the same S-ring partitions as before but elements are replaced with powers of generator

	sr := AssociativeArray(srings);

	for s in srings do
		sr[s] := CycSRingNice(s,G);
	end for;

return {sr[s] : s in srings};

end function;


EncodedSRing := function(sring,G);

// Given an S-ring over a finite group G,
// return an array of sets of integers. The first set is a singleton containing the order of the
// S-ring. The remaining sets of integers represent the partition corresponding to the S-ring
// sring as in the function CycSRingNice

	Code := [];
	Code[1] := {SRingOrder(sring)};
	
	sr := SetToSequence(CycSRingNice(sring,G));
	
	Code cat:= sr;

	return Code;
end function;


EncodedOrder := function(Code);

// Given an encoded S-ring,
// returns the order of the S-ring.

	return Random(Code[1]);
end function;


EncodedSRings := function(srings,G);  //Needed?

// Given a set of S-rings over a cyclic group G,
// returns a set of encoded S-rings.

	sr := AssociativeArray(srings);

	for s in srings do
		sr[s]:= EncodedSRing(s, G);
	end for;

	return {sr[s] : s in srings};
end function;


DecodedSRing := function(code, G);

// Given a encoded S-ring over a cyclic group G,
// return the s-ring over G.

	code := Reverse(code);
	code := Prune(code);
	Code := SequenceToSet(code);
	SR := AssociativeArray(Code);
	
	for C in Code do
		SR[C] := {G.1^n : n in C};
	end for;	

	return {SR[C] : C in Code};
end function;


IncludeSRing := function(sring, H, G)

// Given an S-ring over a cyclic group H and a larger cyclic group G,
// returns sring as an immersed S-ring of G.
	
	code := EncodedSRing(sring, H);
	m := #G div EncodedOrder(code);

	for i := 2 to #code do 
		code[i] := {n * m : n in code[i]};
	end for;

	return DecodedSRing(code, G);
end function;


AutoClassCyc := function(x, n);

// Given an element x of a cyclic group G and an integer n,
// returns the automorphism class of a with respect to the automorphism group <n> in the 
// ambient cyclic group G.

	if Gcd(n,Order(x)) ne 1 
		then return {};
	else
		C := {x};
		b := x^n;
		
		while b ne x do
			C join:= {b};
			b := b^n;
		end while;
		
		return C;
	end if;
end function;


// For general cyclic groups, one should create an AutoClassCyc2 := function(H,n), where H is 
// a finite subset of integers and this function runs a for loop over the elements of H and 
// iterates AutoClassCyc.


AutoClassCyc_internal := function(x, n);

// An internal routine used in AutoSRingCyc. This function behaves exactly like AutoClassCyc
// although the orginal gcd calculation is removed. Since AutoSRingCyc does this calculate,
// it is redundant to do it again.

		C := {x};
		b := x^n;
		
		while b ne x do
			C join:= {b};
			b := b^n;
		end while;
		
		return C;
end function;


AutoSRingCyc := function(G,n);

// Given a finite cyclic group G and an integer n,
// returns the partition of G corresponding to the rational s-ring induced by <n> < Aut(G).

	if Gcd(n,#G) ne 1 
		then return {};
	else
		Sring := {{Id(G)}};
		g := Set(G) diff {Id(G)};

		while #g ne 0 do
			x := Random(g);
			C := AutoClassCyc_internal(x,n);
			Sring join:= {C};
			g diff:= C;
		end while;
		
		return Sring;
	end if;
end function;


// For general cyclic groups, one should create an AutoSRingCyc2 := function(G,H), where H is 
// a finite subset of integers and this function runs a for loop over the elements of H and 
// iterates AutoSRingCyc.


AutoSRingCyc_internal := function(G,n);

// An internal routine used in RationalSRingsPrime and TopRationalSRingPrime. This function 
// behaves exactly like AutoSRingsCyc although the orginal gcd calculation is removed. Since 
// RationalSRingsPrime and TopRationalSRingsPrime only considers relatively prime integers, 
// this gcd check is superfluous. 

		Sring := {{Id(G)}};
		g := Set(G) diff {Id(G)};

		while #g ne 0 do
			x := Random(g);
			C := AutoClassCyc_internal(x,n);
			Sring join:= {C};
			g diff:= C;
		end while;
		
		return Sring;
end function;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////Functions S-rings over Z_{p^n}////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////


//```````````````````````````````````````````````````````````````````````````````````````````````
//```````````````````````````````````````````Arithmetic Functions for p^n````````````````````````````````````````````````````
//```````````````````````````````````````````````````````````````````````````````````````````````
FindPrime := function(n);

// Given an integer n which is the power of a prime,
// returns the prime divisor p if possible. Otherwise, returns a random prime divisor if n is not a power of a prime.

	return Random(PrimeDivisors(n));
end function;


FindExponent := function(n);

// Given an integer n which is the power of a prime,
// return the exponent of p if possible. Otherwise, returns the exponent of a random prime 
// divisor if n is not a power of a prime.

	if n eq 1
		then return 0;
	else
		p := Random(PrimeDivisors(n));
		Z := Integers();
		return Z!Log(p,n);
	end if;
end function;


FindPrimeWithExponent := function(n)

// Given an integer n which is the power of a prime,
// return the prime divisor and exponent of p if possible. Otherwise, returns prime and the exponent of 
// a random prime divisor if n is not a power of a prime.

	p := Random(PrimeDivisors(n));
	Z := Integers();
	return p, Z!Log(p,n);
end function;


Layer := function(k,G);

// Given a cyclic p-group G and positive integer n,
// returns the unique subgroup of G of order p^k.
	
	p,n := FindPrimeWithExponent(#G);
	return sub<G | G.1^(p^(n-k))>;
end function;


//```````````````````````````````````````````````````````````````````````````````````````````````
//```````````````````````````````````````````Internal Processes````````````````````````````````````````````````````
//```````````````````````````````````````````````````````````````````````````````````````````````


InflatedDecodedSRing := function(code,G);

// Given a encoded S-ring over a cyclic group G,
// return the s-ring over G inflated by degree 1.
	
	p := FindPrime(#G);
	
	for i := 2 to #code do 
		code[i] := {n div p : n in code[i]};
	end for;

	return DecodedSRing(code,G);
end function;


InflatedSRing := function(sring,G);

// Given an immersed S-ring in a cyclic group G,
// returns the inflated S-ring whose order has inflated by degree 1.
	
	p, k := FindPrimeWithExponent(#G);
	m := FindExponent(SRingOrder(sring));

	if m eq k then 
		return sring;
	else
		H := Layer(1,G); 
		code := EncodedSRing(sring, G);
		S := InflatedDecodedSRing(code,G);
		return {Cosets(C,H,G) : C in S};
	end if;	
end function;


MultiInflatedSRing := function(sring, G, r);

// Iterates InflatedSRing r-times.


	for i := 1 to r do
		sring := InflatedSRing(sring, G);
	end for;
	return sring;
end function;


DeflatedDecodedSRing := function(code, G);


	p := FindPrime(#G);
	
	for i := 2 to #code do 
		code[i] := {n * p : n in code[i]};
	end for;

	return DecodedSRing(code,G);
end function;


DeflatedSRing := function(sring,G);

// Given an immersed S-ring in a cyclic group G,
// returns the deflated S-ring whose order has deflated by degree 1.
	
	p, k := FindPrimeWithExponent(#G);
	m := FindExponent(SRingOrder(sring));

	H := Layer(1,G);
	code := EncodedSRing(sring, G);
	return DeflatedDecodedSRing(code,G);
	
end function;


MultiDeflatedSRing := function(sring, G, r);

// Iterates DeflatedSRing r-times.


	for i := 1 to r do
		sring := DeflatedSRing(sring, G);
	end for;
	return sring;
end function;


DeflatedSRings := function(srings, G);

// Given immersed S-rings in a cyclic group G,
// returns the deflated S-rings whose order has deflated by degree 1.

	sr := AssociativeArray(srings);

	for s in srings do
		sr[s] := DeflatedSRing(s,G);
	end for;

return {sr[s] : s in srings};

end function;


MultiDeflatedSRings := function(srings, G,r);

// Iterates DeflatedSRings r-times.

	sr := AssociativeArray(srings);

	for s in srings do
		sr[s] := MultiDeflatedSRing(s,G,r);
	end for;

return {sr[s] : s in srings};

end function;



//```````````````````````````````````````````````````````````````````````````````````````````````
//```````````````````````````````````````````S-rings Functions for Z_{p^n}````````````````````````````````````````````````````
//```````````````````````````````````````````````````````````````````````````````````````````````


RationalSRingsPrime:= function(G);

// Given a finite cyclic group G of order p^k,
// returns all the partitions of G which correspond to rational s-rings.
// Since the automorphism group of a cyclic group of odd prime power order is cyclic itself,
// a primitive root exists, and we use it to speed up the calculations. 

	SRings := {};
	n := #G;
	a := PrimitiveRoot(n);			// a generates Aut(G)
	f := EulerPhi(n);
	
	for d in Divisors(f) do
		SRings join:= {AutoSRingCyc_internal(G,a^d mod n)};
	end for;

	return SRings;
	

end function;


TopRationalSRingsPrime := function(G);

// Given a finite cyclic group G of order p^k,
// returns all the partitions of G which correspond to rational s-rings which are wedge-
// indecomposable.

	SRings := {}; 
	n := #G;
	p := FindPrime(n); 
	q := n div p;      
	f := EulerPhi(n);
	a := PrimitiveRoot(n);			// a generates Aut(G)
	
	for d in Divisors(p-1) do
		SRings join:= {AutoSRingCyc_internal(G,a^(q*d) mod n)};
	end for;					
							
	return SRings;

end function;


AtomicSRingsPrime := function(G);

// Given a finite cyclic group G of order p^k,
// returns all the partitions of G which correspond to atomic immersed S-rings of G
	
	SRings := {SRing0(G)};
	n := #G;
	p, k  := FindPrimeWithExponent(n);

	for r := 1 to k do
		H, i := Layer(r,G);
		SRings join:= TopRationalSRingsPrime(H);
		SRings join:= {SRing0(H)};
	end for;
	return SRings;

end function;


WedgeProduct := function(nucleus, H, cloud, K);

// Given two S-rings, nucleus and cloud, over cyclic groups, H and K, respectively,
// returns the wedge product (S wedge T) and the cyclic group of order #H*#K. 

	k := FindExponent(#H);
	G := CyclicGroup(GrpPC, #H*#K);
	
	nucleus := IncludeSRing(nucleus, H, G);
	cloud := IncludeSRing(cloud, K,G);

	R := MultiInflatedSRing(cloud, G, k);
	cloud := RemoveUnitClass(R,G);

	return nucleus join cloud, G;
end function; 


IsWedgePossible := function(nucleus, H, cloud, K, G);

// Given an S-ring nucleus over N and an S-ring Cloud over K,
// returns true if the semi-wedge product is possible.
// 1 < L < H < G, with L = G/K.

	n := FindExponent(#G);
	k := FindExponent(#K);
	L := Layer(n-k, G);
	nucleus := IncludeSRing(nucleus, H, G);

	if not IsSset(Set(L),nucleus)

	then 
		return false;
	
	else 
		r := FindExponent(#H);
		QH := Layer(r-1, G);
		cloud := IncludeSRing(cloud, K,G);

		if not IsSset(Set(QH),cloud) 

		then 
			return false;
		
		else
			DN := DeflatedSRing(nucleus, G);
			IC := ImmersedSRing(cloud, Set(QH), G);
			
			return IC eq DN;
		end if;
	end if;
end function;


TrivialWedgeProducts := function(H, srings, K);

// Given a cyclic group H and a set of S-rings over some cyclic group K,
// returns all wedge products over G with nucleus the trivial S-ring over G and clouds from srings.

	trivial := SRing0(H);
	G := CyclicGroup(GrpPC,#H*#K);
	SR := AssociativeArray(srings);

	for cloud in srings do
		S, L := WedgeProduct(trivial, H, cloud, K);
		SR[cloud] := IncludeSRing(S,L, G);
	end for;

	return {SR[cloud] : cloud in srings}, G;
end function;	


WedgeProducts := function(sring, H, srings, K);

// Given a cyclic group H and a set of S-rings over some cyclic group K,
// returns all wedge products over G with nucleus sring and clouds from srings.

	G := CyclicGroup(GrpPC,#H*#K);
	SR := AssociativeArray(srings);

	for cloud in srings do
		S, L := WedgeProduct(sring, H, cloud, K);
		SR[cloud] := IncludeSRing(S,L, G);
	end for;

	return {SR[cloud] : cloud in srings}, G;
end function;	


SemiWedgeProduct := function(nucleus, H, cloud, K, G);

// Given subgroups 1 < L < H < G, each cyclic p-groups and L = G/K, 
// and given S-rings nucleus and cloud
// over H and G/K, respectively,
// returns the semi-wedge product (S wedge T). 

	h := FindExponent(#H); 
	k := FindExponent(#K); 
	n := FindExponent(#G); 
	
	nucleus := IncludeSRing(nucleus, H, G);
	cloud := IncludeSRing(cloud, K,G); 

	R := MultiInflatedSRing(cloud, G, n-k);
	cloud := RemoveSubgroup(R, Set(Layer(h,G)), G);

	return nucleus join cloud;
end function; 


SemiWedgeProducts := function(sring, H, srings, K, G);

// Given subgroups 1 < L < H < G, each cyclic p-groups and L = G/K,
// and given an S-ring over H and a set of S-rings over K,
// returns all semiwedge products over G with nucleus sring and clouds from srings.

	SR := AssociativeArray(srings);

	for cloud in srings do
		if IsWedgePossible(sring,H,cloud,K,G) then
			SR[cloud] := SemiWedgeProduct(sring, H, cloud, K, G);
		else SR[cloud] := {};
		end if;
	end for;

	return {SR[cloud] : cloud in srings} diff { {} };
end function;	

		
forward SRings;
SRings := function(G);

// Given a cyclic group G of prime power order,
// returns the set of all S-ring over G.

	p, k := FindPrimeWithExponent(#G);

	if k eq 1
		then return RationalSRingsPrime(G);

	else
			srings := {SRing0(G)};
			srings join:= TopRationalSRingsPrime(G);
			Q := Layer(k-1,G);		//cloud
			srQ := SRings(Q);
			

			for i := 1 to k-1 do
				N := Layer(i,G);      //nucleus
				srN := TopRationalSRingsPrime(N);
				
				for s in srN do
					srings join:= SemiWedgeProducts(s, N, srQ, Q, G); 
				end for;

				H := Layer(k-i, G);
				srH := SRings(H);
			
				trivials, K := TrivialWedgeProducts(N, srH, H);
				
				srings join:= {IncludeSRing(sring, K, G) : sring in trivials};

			end for;
				
				return srings;
	end if;
end function;







